{"version":3,"sources":["assets/map.png","context/challenges/index.ts","components/Icon.tsx","components/Challenges/Item.tsx","components/Challenges/Week.tsx","components/Challenges/index.tsx","context/navigation/index.ts","context/players/index.ts","components/Chart/KillsPerDeath.tsx","components/Map/index.tsx","utils/format.ts","components/Chart/PlaceTop.tsx","components/Players/Stats.tsx","components/Players/Card.tsx","components/Players/index.tsx","utils/request.ts","context/challenges/Provider.tsx","utils/fortnite.ts","context/navigation/Provider.tsx","context/accounts/index.ts","context/accounts/Provider.tsx","context/players/Provider.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","challengesDefault","weeks","ChallengesContext","createContext","Icon","icon","name","faSquare","faCheckSquare","faStar","console","warn","getIconFromName","className","fixedWidth","ChallengeItem","title","quest_id","stars","xp","useState","localStorage","getItem","checked","setChecked","onClick","prevChecked","nextChecked","setItem","ProgressBar","now","Array","map","_","key","ChallengesWeek","challenges","image","Card","Img","variant","src","Body","Title","challenge","ChallengesCards","useContext","Row","as","FlipMove","duration","Object","entries","reverse","week","Col","md","navigationDefault","category","tab","NavigationContext","playersDefault","PlayersContext","ChartKillsPerDeath","useNavigation","chartData","usePlayers","global_stats","value","kd","sort","a","b","positive","Math","min","max","filterId","aspect","data","width","height","id","dx","dy","stdDeviation","floodColor","axisLine","dataKey","stroke","tickLine","y","animationBegin","animationDuration","fill","isAnimationActive","style","filter","FortniteMap","options","limitToWrapper","wheel","step","Image","fluid","SRC","formatStatColor","formatStatTitle","ChartPlaceTop","stats","topStats","startsWith","reduce","rest","matchesplayed","endAngle","innerRadius","label","labelLine","outerRadius","startAngle","PlayerStats","keys","PlayerCard","account","level","progress_pct","PlayersCards","players","player","winrate","lg","api","setup","baseURL","cache","maxAge","headers","API_CONFIG","handleResponse","response","handleError","requestError","Promise","reject","handleRequest","config","source","axios","CancelToken","loading","cancel","undefined","isLoading","request","resolve","requestConfig","cancelToken","token","requestName","method","url","then","log","error","isCancel","isArray","requests","c","some","all","ChallengesProvider","children","setChallenges","setLoading","useEffect","season","params","requestChallenges","finally","Spinner","animation","role","Provider","NavigationProvider","navigation","setNavigation","handleSelect","useCallback","eventKey","prevNavigation","xl","Navbar","Nav","activeKey","onSelect","Item","Link","accountsDefault","AccountsContext","AccountsProvider","usernames","accounts","setAccounts","platform","username","requestLookup","users","user","userIndex","PlayersProvider","setPlayers","accountIds","account_id","p","PlayersAccountsProvider","props","AppContent","Challenges","CONFIG","Players","App","Container","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.9a8010e4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/map.02a0c980.png\";","import { createContext, useContext } from \"react\";\n\nexport const challengesDefault = { weeks: {} } as ChallengesContext;\n\nexport const ChallengesContext = createContext<ChallengesContext>(\n  challengesDefault\n);\n\nexport default () => useContext(ChallengesContext);\n","import {\n  faCheckSquare,\n  faSquare,\n  faStar\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { FC } from \"react\";\n\n// IF YOU'RE WORKING ON THIS FILE, PLEASE READ THIS FIRST:\n// https://fontawesome.com/icons?d=gallery&s=solid&m=free\n\nconst getIconFromName = (name: string) => {\n  switch (name) {\n    case \"check-off\":\n      return faSquare;\n    case \"check-on\":\n      return faCheckSquare;\n    case \"star\":\n      return faStar;\n    default:\n      console.warn(`Icon \"${name}\" not imported.`);\n      return null;\n  }\n};\n\nconst Icon: FC<{ name: string }> = ({ name }) => {\n  const icon = getIconFromName(name);\n  return (\n    icon && (\n      <span className=\"Icon\">\n        <FontAwesomeIcon fixedWidth={true} icon={icon} />\n      </span>\n    )\n  );\n};\n\nexport default Icon;\n","import React, { FC, useState } from \"react\";\nimport { ProgressBar } from \"react-bootstrap\";\n\nimport Icon from \"../Icon\";\n\nconst ChallengeItem: FC<Challenge> = ({ title, quest_id, stars, xp }) => {\n  const [checked, setChecked] = useState<string | null>(\n    localStorage.getItem(quest_id)\n  );\n  const handleClick = () =>\n    setChecked(prevChecked => {\n      const nextChecked = prevChecked === \"on\" ? \"off\" : \"on\";\n      localStorage.setItem(quest_id, nextChecked);\n      return nextChecked;\n    });\n  return (\n    <div className=\"ChallengeItem\" onClick={handleClick}>\n      <Icon name={`check-${checked || \"off\"}`} />\n      <div className=\"ChallengeItem-title\">{title}</div>\n      <ProgressBar now={checked === \"on\" ? 100 : 0} />\n      <span className=\"ChallengeItem-stars\">\n        {[...Array(stars)].map((_, key) => (\n          <Icon name=\"star\" key={key} />\n        ))}\n      </span>\n      <span className=\"ChallengeItem-xp\">{xp}</span>\n    </div>\n  );\n};\n\nexport default ChallengeItem;\n","import React, { FC } from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport ChallengeItem from \"./Item\";\n\nconst ChallengesWeek: FC<ChallengeWeek> = ({ challenges, image, name }) => (\n  <Card className=\"ChallengesWeek\">\n    <Card.Img variant=\"top\" src={image} />\n    <Card.Body>\n      <Card.Title>{name}</Card.Title>\n      {challenges.map((challenge, key) => (\n        <ChallengeItem key={key} {...challenge} />\n      ))}\n    </Card.Body>\n  </Card>\n);\n\nexport default ChallengesWeek;\n","import React, { FC } from \"react\";\nimport { Col, Row } from \"react-bootstrap\";\nimport FlipMove from \"react-flip-move\";\n\nimport useChallenges from \"../../context/challenges\";\nimport ChallengesWeek from \"./Week\";\n\nconst ChallengesCards: FC = () => {\n  const { weeks } = useChallenges();\n  return (\n    <Row as={FlipMove} className=\"ChallengesCards\" duration={400}>\n      {Object.entries(weeks)\n        .reverse()\n        .map(([key, week]) => (\n          <Col key={key} md={6}>\n            <ChallengesWeek {...week} />\n          </Col>\n        ))}\n    </Row>\n  );\n};\n\nexport default ChallengesCards;\n","import { createContext, useContext } from \"react\";\n\nexport const navigationDefault = {\n  category: \"solo\",\n  tab: \"stats\"\n} as NavigationContext;\n\nexport const NavigationContext = createContext<NavigationContext>(\n  navigationDefault\n);\n\nexport default () => useContext(NavigationContext);\n","import { createContext, useContext } from \"react\";\n\nexport const playersDefault = [] as PlayersContext;\n\nexport const PlayersContext = createContext<PlayersContext>(playersDefault);\n\nexport default () => useContext(PlayersContext);\n","import React, { FC } from \"react\";\nimport {\n  Bar,\n  BarChart,\n  Cell,\n  ReferenceLine,\n  ResponsiveContainer,\n  XAxis\n} from \"recharts\";\n\nimport useNavigation from \"../../context/navigation\";\nimport usePlayers from \"../../context/players\";\n\nconst ChartKillsPerDeath: FC = () => {\n  const { category } = useNavigation();\n  const players = usePlayers();\n  const chartData = players\n    .map(({ global_stats, name }) => ({\n      name,\n      value: global_stats[category].kd\n    }))\n    .sort((a, b) => b.value - a.value)\n    .map(({ name, value }) => ({\n      name,\n      positive: value >= 1,\n      value: [Math.min(value, 1), Math.max(value, 1)]\n    }));\n  const filterId = `ChartKillsPerDeath-shadow`;\n\n  return (\n    <ResponsiveContainer aspect={6} className=\"ChartKillsPerDeath\">\n      <BarChart data={chartData} width={512} height={512}>\n        <defs>\n          <filter id={filterId}>\n            <feDropShadow\n              dx=\"0\"\n              dy=\"0\"\n              stdDeviation={1}\n              floodColor=\"rgba(0, 0, 0, 0.5)\"\n            />\n          </filter>\n        </defs>\n        <XAxis axisLine={false} dataKey=\"name\" stroke=\"#fff\" tickLine={false} />\n        <ReferenceLine y={1} stroke=\"#fff\" />\n        <Bar\n          animationBegin={0}\n          animationDuration={800}\n          dataKey=\"value\"\n          fill=\"#ced4da\"\n          isAnimationActive={true}\n          stroke=\"none\"\n          style={{ filter: `url(#${filterId})` }}\n        >\n          {chartData.map(({ name, positive }) => (\n            <Cell fill={positive ? \"#ffc107\" : \"#ced4da\"} key={name} />\n          ))}\n        </Bar>\n      </BarChart>\n    </ResponsiveContainer>\n  );\n};\n\nexport default ChartKillsPerDeath;\n","import React, { FC } from \"react\";\nimport { Image } from \"react-bootstrap\";\nimport { TransformComponent, TransformWrapper } from \"react-zoom-pan-pinch\";\n\nimport SRC from \"../../assets/map.png\";\n// const SRC = \"https://fortniteapi.io/images/map.png\";\n\nconst FortniteMap: FC = () => (\n  <div className=\"FortniteMap\">\n    <TransformWrapper options={{ limitToWrapper: true }} wheel={{ step: 64 }}>\n      <TransformComponent>\n        <Image fluid={true} src={SRC} />\n      </TransformComponent>\n    </TransformWrapper>\n  </div>\n);\n\nexport default FortniteMap;\n","export const formatStatColor = (name: string) => {\n  switch (name) {\n    case \"placetop1\":\n      return \"#ffc107\";\n    case \"placetop3\":\n    case \"placetop5\":\n    case \"placetop10\":\n      return \"#007bff\";\n    case \"placetop6\":\n    case \"placetop12\":\n    case \"placetop25\":\n      return \"#28a745\";\n    default:\n      return \"#ced4da\";\n  }\n};\n\nexport const formatStatTitle = (name?: string) => {\n  switch (name) {\n    case \"placetop1\":\n      return \"Top 1\";\n    case \"kd\":\n      return \"Kills per Death\";\n    case \"winrate\":\n      return \"Win Rate\";\n    case \"placetop3\":\n      return \"Top 3\";\n    case \"placetop5\":\n      return \"Top 5\";\n    case \"placetop6\":\n      return \"Top 6\";\n    case \"placetop10\":\n      return \"Top 10\";\n    case \"placetop12\":\n      return \"Top 12\";\n    case \"placetop25\":\n      return \"Top 25\";\n    case \"kills\":\n      return \"Kills\";\n    case \"matchesplayed\":\n      return \"Matches Played\";\n    case \"minutesplayed\":\n      return \"Minutes Played\";\n    case \"score\":\n      return \"Score\";\n    case \"playersoutlived\":\n      return \"Players Outlived\";\n    default:\n      return name;\n  }\n};\n","import React, { FC } from \"react\";\nimport { Pie, PieChart, ResponsiveContainer } from \"recharts\";\n\nimport { formatStatColor, formatStatTitle } from \"../../utils/format\";\n\nconst ChartPlaceTop: FC<{\n  id: string;\n  stats: PlayerStatsDuo | PlayerStatsSolo | PlayerStatsSquad;\n}> = ({ id, stats }) => {\n  const statsEntries = Object.entries(stats);\n  const topStats = statsEntries\n    .filter(([name, value]) => name.startsWith(\"placetop\") && value)\n    .map(([name, value]) => ({\n      fill: formatStatColor(name),\n      name: formatStatTitle(name),\n      value\n    }));\n  const chartData = [\n    ...topStats,\n    {\n      fill: formatStatColor(\"matchesplayed\"),\n      value: topStats.reduce(\n        (rest, { value }) => rest - value,\n        stats.matchesplayed\n      )\n    }\n  ].reverse();\n  const renderLabel = ({ name }: { name?: string }) =>\n    formatStatTitle(name) || \"\";\n  const filterId = `ChartPlaceTop-shadow-${id}`;\n\n  return (\n    <ResponsiveContainer aspect={1} className=\"ChartPlaceTop\">\n      <PieChart width={512} height={512}>\n        <defs>\n          <filter id={filterId}>\n            <feDropShadow\n              dx=\"0\"\n              dy=\"0\"\n              stdDeviation={1}\n              floodColor=\"rgba(0, 0, 0, 0.5)\"\n            />\n          </filter>\n        </defs>\n        <Pie\n          animationBegin={0}\n          animationDuration={800}\n          dataKey=\"value\"\n          data={chartData}\n          endAngle={450}\n          innerRadius=\"33%\"\n          isAnimationActive={true}\n          label={renderLabel}\n          labelLine={false}\n          outerRadius=\"67%\"\n          startAngle={90}\n          stroke=\"none\"\n          style={{ filter: `url(#${filterId})` }}\n        />\n      </PieChart>\n    </ResponsiveContainer>\n  );\n};\n\nexport default ChartPlaceTop;\n","import React, { FC } from \"react\";\n\nimport { formatStatTitle } from \"../../utils/format\";\n\nconst PlayerStats: FC<{\n  stats: PlayerStatsDuo | PlayerStatsSolo | PlayerStatsSquad;\n}> = ({ stats }) => (\n  <div className=\"PlayerStats\">\n    {Object.keys(stats)\n      .sort()\n      .map(key =>\n        (stats as any)[key] ? (\n          <div className=\"PlayerStats-stat\" key={key}>\n            <span className=\"PlayerStats-stat-name\">\n              {formatStatTitle(key)}\n            </span>\n            <span className=\"PlayerStats-stat-value\">\n              {(stats as any)[key]}\n            </span>\n          </div>\n        ) : null\n      )}\n  </div>\n);\n\nexport default PlayerStats;\n","import React, { FC } from \"react\";\nimport { Card, ProgressBar } from \"react-bootstrap\";\n\nimport useNavigation from \"../../context/navigation\";\nimport ChartPlaceTop from \"../Chart/PlaceTop\";\nimport PlayerStats from \"./Stats\";\n\nconst PlayerCard: FC<Player> = ({ account, global_stats, name }) => {\n  const { category } = useNavigation();\n  const stats = global_stats[category];\n  return (\n    <Card className=\"PlayerCard\">\n      <Card.Body>\n        <Card.Title as=\"h2\">{name}</Card.Title>\n        <h3 className=\"ChartPlaceTop-level\">\n          Level <span>{account.level}</span>\n        </h3>\n        <ProgressBar now={account.progress_pct} />\n        <ChartPlaceTop id={name} stats={stats} />\n        <PlayerStats stats={stats} />\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport default PlayerCard;\n","import React, { FC } from \"react\";\nimport { Col, Row } from \"react-bootstrap\";\nimport FlipMove from \"react-flip-move\";\n\nimport useNavigation from \"../../context/navigation\";\nimport usePlayers from \"../../context/players\";\nimport PlayerCard from \"./Card\";\n\nconst PlayersCards: FC = () => {\n  const players = usePlayers();\n  const { category } = useNavigation();\n  return (\n    <Row as={FlipMove} className=\"PlayersCards\" duration={400}>\n      {players\n        .filter(player => player.global_stats[category])\n        .sort(\n          (a, b) =>\n            b.global_stats[category].winrate - a.global_stats[category].winrate\n        )\n        .map(player => (\n          <Col key={player.name} md={6} lg={4}>\n            <PlayerCard {...player} />\n          </Col>\n        ))}\n    </Row>\n  );\n};\n\nexport default PlayersCards;\n","import axios, {\n  AxiosError,\n  AxiosRequestConfig,\n  AxiosResponse,\n  Cancel\n} from \"axios\";\nimport { setup } from \"axios-cache-adapter\";\nimport API_CONFIG from \"../config/api.json\";\n\n// Create `axios` instance with pre-configured `axios-cache-adapter`\nconst api = setup({\n  baseURL: \"https://fortniteapi.io\",\n  cache: {\n    maxAge: 60 * 1000\n  },\n  headers: {\n    ...API_CONFIG,\n    \"Content-Type\": \"application/json\"\n  }\n});\n\n// Response callback\nconst handleResponse = (response: AxiosResponse) => response.data;\n// Error callback\nconst handleError = (requestError: AxiosError) =>\n  Promise.reject(requestError.response);\n\nconst handleRequest = (config: AxiosRequestConfig) => {\n  const source = axios.CancelToken.source();\n  let loading = true;\n  return {\n    cancel: () => (loading ? source.cancel() : undefined),\n    isLoading: () => loading,\n    request: new Promise<AxiosResponse>((resolve, reject) => {\n      const requestConfig = { ...config, cancelToken: source.token };\n      const requestName = `[${config.method || \"GET\"}] ${config.url}`;\n      api.request(requestConfig).then(\n        (response: AxiosResponse) => {\n          loading = false;\n          console.log(requestName, { config, response });\n          resolve(response);\n        },\n        (error: AxiosError | Cancel) => {\n          loading = false;\n          if (axios.isCancel(error)) {\n            console.warn(requestName, \"(canceled)\", { config, error });\n          } else {\n            console.error(requestName, { config, error });\n          }\n          reject(error);\n        }\n      );\n    }).then(handleResponse, handleError)\n  };\n};\n\nexport default (config: AxiosRequestConfig | AxiosRequestConfig[]) => {\n  if (Array.isArray(config)) {\n    const requests = config.map(c => handleRequest(c));\n    return {\n      cancel: () => requests.map(({ cancel }) => cancel()),\n      isLoading: () => requests.some(({ isLoading }) => isLoading()),\n      request: Promise.all<AxiosResponse>(\n        requests.map(({ request }) => request)\n      )\n    };\n  }\n  return handleRequest(config);\n};\n","import React, { FC, useEffect, useState } from \"react\";\nimport { Spinner } from \"react-bootstrap\";\n\nimport { challenges as requestChallenges } from \"../../utils/fortnite\";\nimport { ChallengesContext, challengesDefault } from \"./index\";\n\nconst ChallengesProvider: FC = ({ children }) => {\n  const [challenges, setChallenges] = useState<ChallengesContext>(\n    challengesDefault\n  );\n  const [loading, setLoading] = useState<boolean>(true);\n  useEffect(() => {\n    setLoading(true);\n    const { cancel, request } = requestChallenges();\n    request\n      .then(c => {\n        setChallenges(c);\n        console.warn(c);\n      }, console.error)\n      .finally(() => setLoading(false));\n    return cancel;\n  }, []);\n  if (loading) {\n    return (\n      <Spinner animation=\"border\" role=\"status\" variant=\"light\">\n        <span className=\"sr-only\">Loading...</span>\n      </Spinner>\n    );\n  }\n  return (\n    <ChallengesContext.Provider value={challenges}>\n      {children}\n    </ChallengesContext.Provider>\n  );\n};\n\nexport default ChallengesProvider;\n","import request from \"./request\";\n\nexport const challenges = (season: string = \"current\") =>\n  request({\n    params: { season },\n    url: \"/challenges\"\n  });\n\nexport const lookup = (usernames: string[], platform: string = \"psn\") =>\n  request(\n    usernames.map(username => ({\n      params: { platform, username },\n      url: \"/lookup\"\n    }))\n  );\n\nexport const stats = (accountIds: string[]) =>\n  request(accountIds.map(account => ({ params: { account }, url: \"/stats\" })));\n\n// const getRandomInt = (min: number, max: number) =>\n//   Math.round(min + Math.random() * (max - min));\n//\n// const getRandomStats = () => {\n//   const placetop1 = getRandomInt(0, 32);\n//   const placetop3 = getRandomInt(placetop1, placetop1 * 3);\n//   const placetop5 = getRandomInt(placetop3, (placetop3 * 5) / 3);\n//   const placetop6 = getRandomInt(placetop5, (placetop5 * 6) / 5);\n//   const placetop10 = getRandomInt(placetop6, (placetop6 * 10) / 6);\n//   const placetop12 = getRandomInt(placetop10, (placetop10 * 12) / 10);\n//   const placetop25 = getRandomInt(placetop12, (placetop12 * 25) / 12);\n//   const minMatchesPlayed =\n//     placetop1 +\n//     placetop3 +\n//     placetop5 +\n//     placetop6 +\n//     placetop10 +\n//     placetop12 +\n//     placetop25;\n//   const matchesplayed = getRandomInt(minMatchesPlayed, minMatchesPlayed * 3);\n//   const kd = (1 - Math.random()) * 2;\n//   return {\n//     kd,\n//     kills: Math.floor(matchesplayed * kd),\n//     matchesplayed,\n//     minutesplayed: matchesplayed * getRandomInt(10, 15),\n//     placetop1,\n//     placetop10,\n//     placetop12,\n//     placetop25,\n//     placetop3,\n//     placetop5,\n//     placetop6,\n//     playersoutlived: getRandomInt(placetop25, placetop25 * 3),\n//     score: getRandomInt(8, 256),\n//     winrate: placetop1 / matchesplayed\n//   };\n// };\n//\n// export const stats = (account: string) => {\n//   const r = request({ params: { account }, url: \"/stats\" });\n//   return {\n//     cancel: r.cancel,\n//     request: r.request.then(() => ({\n//       account: {\n//         level: getRandomInt(8, 256),\n//         progress_pct: Math.random() * 100\n//       },\n//       global_stats: {\n//         duo: getRandomStats(),\n//         solo: getRandomStats(),\n//         squad: getRandomStats()\n//       }\n//     }))\n//   };\n// };\n","import React, { FC, useCallback, useState } from \"react\";\nimport { Col, Nav, Navbar, Row } from \"react-bootstrap\";\n\nimport { NavigationContext, navigationDefault } from \"./index\";\n\nconst NavigationProvider: FC = ({ children }) => {\n  const [navigation, setNavigation] = useState<NavigationContext>(\n    navigationDefault\n  );\n  const handleSelect = useCallback(\n    (key: \"category\" | \"tab\") => (eventKey: string) =>\n      setNavigation(prevNavigation => ({\n        ...prevNavigation,\n        [key]: eventKey as NavigationContext[\"category\"]\n      })),\n    []\n  );\n  return (\n    <NavigationContext.Provider value={navigation}>\n      <Row className=\"Navigation\">\n        <Col as=\"h1\" xl={4}>\n          Fortnite Losers\n        </Col>\n        <Col as={Navbar} className=\"justify-content-between\" xl={8}>\n          <Nav\n            variant=\"pills\"\n            activeKey={navigation.tab}\n            onSelect={handleSelect(\"tab\")}\n          >\n            <Nav.Item>\n              <Nav.Link eventKey=\"stats\">Stats</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"challenges\">Challenges</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link eventKey=\"map\">Map</Nav.Link>\n            </Nav.Item>\n          </Nav>\n          {navigation.tab === \"stats\" ? (\n            <Nav\n              variant=\"pills\"\n              activeKey={navigation.category}\n              onSelect={handleSelect(\"category\")}\n            >\n              <Nav.Item>\n                <Nav.Link eventKey=\"solo\">Solo</Nav.Link>\n              </Nav.Item>\n              <Nav.Item>\n                <Nav.Link eventKey=\"duo\">Duo</Nav.Link>\n              </Nav.Item>\n              <Nav.Item>\n                <Nav.Link eventKey=\"squad\">Squad</Nav.Link>\n              </Nav.Item>\n            </Nav>\n          ) : null}\n        </Col>\n      </Row>\n      {children}\n    </NavigationContext.Provider>\n  );\n};\n\nexport default NavigationProvider;\n","import { createContext, useContext } from \"react\";\n\nexport const accountsDefault = [] as AccountsContext;\n\nexport const AccountsContext = createContext<AccountsContext>(accountsDefault);\n\nexport default () => useContext(AccountsContext);\n","import React, { FC, useEffect, useState } from \"react\";\nimport { Spinner } from \"react-bootstrap\";\n\nimport { lookup as requestLookup } from \"../../utils/fortnite\";\nimport { AccountsContext, accountsDefault } from \"./index\";\n\nconst AccountsProvider: FC<{ usernames: string[] }> = ({\n  children,\n  usernames\n}) => {\n  const [accounts, setAccounts] = useState<AccountsContext>(accountsDefault);\n  const [loading, setLoading] = useState<boolean>(true);\n  useEffect(() => {\n    setLoading(true);\n    const { cancel, request } = requestLookup(usernames);\n    request\n      .then(\n        users =>\n          setAccounts(\n            users.map((user: { account_id: string }, userIndex: number) => ({\n              username: usernames[userIndex],\n              ...user\n            }))\n          ),\n        console.error\n      )\n      .finally(() => setLoading(false));\n    return cancel;\n  }, [usernames]);\n  if (loading) {\n    return (\n      <Spinner animation=\"border\" role=\"status\" variant=\"light\">\n        <span className=\"sr-only\">Loading...</span>\n      </Spinner>\n    );\n  }\n  return (\n    <AccountsContext.Provider value={accounts}>\n      {children}\n    </AccountsContext.Provider>\n  );\n};\n\nexport default AccountsProvider;\n","import React, { FC, useEffect, useState } from \"react\";\nimport { Spinner } from \"react-bootstrap\";\n\nimport { stats as requestStats } from \"../../utils/fortnite\";\nimport useAccounts from \"../accounts\";\nimport AccountsProvider from \"../accounts/Provider\";\nimport { PlayersContext, playersDefault } from \"./index\";\n\nexport const PlayersProvider: FC = ({ children }) => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [players, setPlayers] = useState<PlayersContext>(playersDefault);\n  const accounts = useAccounts();\n  useEffect(() => {\n    setLoading(true);\n    const { cancel, request } = requestStats(\n      accounts.map(({ account_id }) => account_id)\n    );\n    request\n      .then(p => setPlayers(p), console.error)\n      .finally(() => setLoading(false));\n    return cancel;\n  }, [accounts]);\n  if (loading) {\n    return (\n      <Spinner\n        animation=\"border\"\n        className=\"PlayersProvider-loader\"\n        role=\"status\"\n        variant=\"light\"\n      >\n        <span className=\"sr-only\">Loading...</span>\n      </Spinner>\n    );\n  }\n  return (\n    <PlayersContext.Provider value={players}>\n      {children}\n    </PlayersContext.Provider>\n  );\n};\n\nconst PlayersAccountsProvider: FC<{ usernames: string[] }> = ({\n  usernames,\n  ...props\n}) => (\n  <AccountsProvider usernames={usernames}>\n    <PlayersProvider {...props} />\n  </AccountsProvider>\n);\n\nexport default PlayersAccountsProvider;\n","import React, { FC } from \"react\";\nimport { Container } from \"react-bootstrap\";\n\nimport \"./App.scss\";\nimport ChallengesCards from \"./components/Challenges\";\nimport ChartKillsPerDeath from \"./components/Chart/KillsPerDeath\";\nimport FortniteMap from \"./components/Map\";\nimport PlayersCards from \"./components/Players\";\nimport CONFIG from \"./config/index.json\";\nimport ChallengesProvider from \"./context/challenges/Provider\";\nimport useNavigation from \"./context/navigation\";\nimport NavigationProvider from \"./context/navigation/Provider\";\nimport PlayersProvider from \"./context/players/Provider\";\n\nconst AppContent: FC = () => {\n  const { tab } = useNavigation();\n  switch (tab) {\n    case \"challenges\":\n      return (\n        <ChallengesProvider>\n          <ChallengesCards />\n        </ChallengesProvider>\n      );\n    case \"map\":\n      return <FortniteMap />;\n    default:\n      return (\n        <PlayersProvider usernames={CONFIG.usernames}>\n          <PlayersCards />\n          <h2>Kills per Death</h2>\n          <ChartKillsPerDeath />\n        </PlayersProvider>\n      );\n  }\n};\n\nconst App = () => (\n  <Container className=\"App\">\n    <NavigationProvider>\n      <AppContent />\n    </NavigationProvider>\n  </Container>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}