{"version":3,"sources":["context/navigation/index.ts","context/players/index.ts","utils/format.ts","components/Chart/PlaceTop.tsx","components/Player/Stats.tsx","components/Player/Card.tsx","components/Player/List.tsx","context/navigation/Provider.tsx","utils/request.ts","context/accounts/index.ts","context/accounts/Provider.tsx","utils/fortnite.ts","context/players/Provider.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["navigationDefault","category","tab","NavigationContext","createContext","useContext","playersDefault","PlayersContext","formatStatColor","name","formatStatTitle","ChartPlaceTop","id","stats","topStats","Object","entries","filter","value","startsWith","map","fill","chartData","reduce","rest","matchesplayed","reverse","filterId","aspect","className","width","height","dx","dy","stdDeviation","floodColor","dataKey","data","endAngle","innerRadius","isAnimationActive","label","labelLine","outerRadius","startAngle","stroke","style","PlayerStats","keys","sort","key","PlayerCard","account","global_stats","useNavigation","Card","Body","Title","as","level","ProgressBar","now","progress_pct","PlayersList","players","Row","FlipMove","a","b","winrate","player","Col","md","lg","NavigationProvider","children","useState","navigation","setNavigation","handleSelect","useCallback","eventKey","prevNavigation","Provider","Navbar","Nav","variant","activeKey","onSelect","Item","Link","api","setup","baseURL","cache","maxAge","headers","API_CONFIG","handleResponse","response","handleError","requestError","Promise","reject","handleRequest","config","source","axios","CancelToken","loading","cancel","undefined","isLoading","request","resolve","requestConfig","cancelToken","token","requestName","method","url","then","console","log","error","isCancel","warn","Array","isArray","requests","c","some","all","accountsDefault","AccountsContext","AccountsProvider","usernames","accounts","setAccounts","useEffect","platform","username","params","lookup","users","user","userIndex","PlayersProvider","setPlayers","accountIds","account_id","p","PlayersAccountsProvider","props","AppContent","CONFIG","App","Container","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.c9397b34.chunk.js","sourcesContent":["import { createContext, useContext } from \"react\";\n\nexport const navigationDefault = {\n  category: \"solo\",\n  tab: \"stats\"\n} as NavigationContext;\n\nexport const NavigationContext = createContext<NavigationContext>(\n  navigationDefault\n);\n\nexport default () => useContext(NavigationContext);\n","import { createContext, useContext } from \"react\";\n\nexport const playersDefault = [] as PlayersContext;\n\nexport const PlayersContext = createContext<PlayersContext>(playersDefault);\n\nexport default () => useContext(PlayersContext);\n","export const formatStatColor = (name: string) => {\n  switch (name) {\n    case \"placetop1\":\n      return \"#ffc107\";\n    case \"placetop3\":\n    case \"placetop5\":\n    case \"placetop10\":\n      return \"#007bff\";\n    case \"placetop6\":\n    case \"placetop12\":\n    case \"placetop25\":\n      return \"#28a745\";\n    default:\n      return \"#ccc\";\n  }\n};\n\nexport const formatStatTitle = (name?: string) => {\n  switch (name) {\n    case \"placetop1\":\n      return \"Top 1\";\n    case \"kd\":\n      return \"Kills per Death\";\n    case \"winrate\":\n      return \"Win Rate\";\n    case \"placetop3\":\n      return \"Top 3\";\n    case \"placetop5\":\n      return \"Top 5\";\n    case \"placetop6\":\n      return \"Top 6\";\n    case \"placetop10\":\n      return \"Top 10\";\n    case \"placetop12\":\n      return \"Top 12\";\n    case \"placetop25\":\n      return \"Top 25\";\n    case \"kills\":\n      return \"Kills\";\n    case \"matchesplayed\":\n      return \"Matches Played\";\n    case \"minutesplayed\":\n      return \"Minutes Played\";\n    case \"score\":\n      return \"Score\";\n    case \"playersoutlived\":\n      return \"Players Outlived\";\n    default:\n      return name;\n  }\n};\n","import React, { FC } from \"react\";\nimport { Pie, PieChart, ResponsiveContainer } from \"recharts\";\n\nimport { formatStatColor, formatStatTitle } from \"../../utils/format\";\n\nconst ChartPlaceTop: FC<{\n  id: string;\n  stats: PlayerStatsDuo | PlayerStatsSolo | PlayerStatsSquad;\n}> = ({ id, stats }) => {\n  const statsEntries = Object.entries(stats);\n  const topStats = statsEntries\n    .filter(([name, value]) => name.startsWith(\"placetop\") && value)\n    .map(([name, value]) => ({\n      fill: formatStatColor(name),\n      name: formatStatTitle(name),\n      value\n    }));\n  const chartData = [\n    ...topStats,\n    {\n      fill: formatStatColor(\"matchesplayed\"),\n      value: topStats.reduce(\n        (rest, { value }) => rest - value,\n        stats.matchesplayed\n      )\n    }\n  ].reverse();\n  const renderLabel = ({ name }: { name?: string }) =>\n    formatStatTitle(name) || \"\";\n  const filterId = `ChartPlaceTop-shadow-${id}`;\n\n  return (\n    <ResponsiveContainer aspect={1} className=\"ChartPlaceTop\">\n      <PieChart width={512} height={512}>\n        <defs>\n          <filter id={filterId}>\n            <feDropShadow\n              dx=\"0\"\n              dy=\"0\"\n              stdDeviation={1}\n              floodColor=\"rgba(0, 0, 0, 0.5)\"\n            />\n          </filter>\n        </defs>\n        <Pie\n          dataKey=\"value\"\n          data={chartData}\n          endAngle={450}\n          innerRadius=\"33%\"\n          isAnimationActive={true}\n          label={renderLabel}\n          labelLine={false}\n          outerRadius=\"67%\"\n          startAngle={90}\n          stroke=\"none\"\n          style={{ filter: `url(#${filterId})` }}\n        />\n      </PieChart>\n    </ResponsiveContainer>\n  );\n};\n\nexport default ChartPlaceTop;\n","import React, { FC } from \"react\";\n\nimport { formatStatTitle } from \"../../utils/format\";\n\nconst PlayerStats: FC<{\n  stats: PlayerStatsDuo | PlayerStatsSolo | PlayerStatsSquad;\n}> = ({ stats }) => (\n  <div className=\"PlayerStats\">\n    {Object.keys(stats)\n      .sort()\n      .map(key =>\n        (stats as any)[key] ? (\n          <div className=\"PlayerStats-stat\" key={key}>\n            <span className=\"PlayerStats-stat-name\">\n              {formatStatTitle(key)}\n            </span>\n            <span className=\"PlayerStats-stat-value\">\n              {(stats as any)[key]}\n            </span>\n          </div>\n        ) : null\n      )}\n  </div>\n);\n\nexport default PlayerStats;\n","import React, { FC } from \"react\";\nimport { Card, ProgressBar } from \"react-bootstrap\";\n\nimport useNavigation from \"../../context/navigation\";\nimport ChartPlaceTop from \"../Chart/PlaceTop\";\nimport PlayerStats from \"./Stats\";\n\nconst PlayerCard: FC<Player> = ({ account, global_stats, name }) => {\n  const { category } = useNavigation();\n  const stats = global_stats[category];\n  return (\n    <Card className=\"PlayerCard\">\n      <Card.Body>\n        <Card.Title as=\"h2\">{name}</Card.Title>\n        <h3 className=\"ChartPlaceTop-level\">\n          Level <span>{account.level}</span>\n        </h3>\n        <ProgressBar now={account.progress_pct} />\n        <ChartPlaceTop id={name} stats={stats} />\n        <PlayerStats stats={stats} />\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport default PlayerCard;\n","import React, { FC } from \"react\";\nimport { Col, Row } from \"react-bootstrap\";\nimport FlipMove from \"react-flip-move\";\n\nimport useNavigation from \"../../context/navigation\";\nimport usePlayers from \"../../context/players\";\nimport PlayerCard from \"./Card\";\n\nconst PlayersList: FC = () => {\n  const players = usePlayers();\n  const { category } = useNavigation();\n  return (\n    <Row as={FlipMove} className=\"PlayersList\">\n      {players\n        .sort(\n          (a, b) =>\n            b.global_stats[category].winrate - a.global_stats[category].winrate\n        )\n        .map(player => (\n          <Col key={player.name} md={6} lg={4}>\n            <PlayerCard {...player} />\n          </Col>\n        ))}\n    </Row>\n  );\n};\n\nexport default PlayersList;\n","import React, { FC, useCallback, useState } from \"react\";\nimport { Nav, Navbar } from \"react-bootstrap\";\n\nimport { NavigationContext, navigationDefault } from \"./index\";\n\nconst NavigationProvider: FC = ({ children }) => {\n  const [navigation, setNavigation] = useState<NavigationContext>(\n    navigationDefault\n  );\n  const handleSelect = useCallback(\n    (key: \"category\" | \"tab\") => (eventKey: string) =>\n      setNavigation(prevNavigation => ({\n        ...prevNavigation,\n        [key]: eventKey as NavigationContext[\"category\"]\n      })),\n    []\n  );\n  return (\n    <NavigationContext.Provider value={navigation}>\n      <Navbar className=\"Navigation justify-content-between\">\n        <Nav\n          variant=\"pills\"\n          activeKey={navigation.tab}\n          onSelect={handleSelect(\"tab\")}\n        >\n          <Nav.Item>\n            <Nav.Link eventKey=\"stats\">Stats</Nav.Link>\n          </Nav.Item>\n          <Nav.Item>\n            <Nav.Link eventKey=\"challenges\">Challenges</Nav.Link>\n          </Nav.Item>\n        </Nav>\n        <Nav\n          variant=\"pills\"\n          activeKey={navigation.category}\n          onSelect={handleSelect(\"category\")}\n        >\n          <Nav.Item>\n            <Nav.Link eventKey=\"solo\">Solo</Nav.Link>\n          </Nav.Item>\n          <Nav.Item>\n            <Nav.Link eventKey=\"duo\">Duo</Nav.Link>\n          </Nav.Item>\n          <Nav.Item>\n            <Nav.Link eventKey=\"squad\">Squad</Nav.Link>\n          </Nav.Item>\n        </Nav>\n      </Navbar>\n      {children}\n    </NavigationContext.Provider>\n  );\n};\n\nexport default NavigationProvider;\n","import axios, {\n  AxiosError,\n  AxiosRequestConfig,\n  AxiosResponse,\n  Cancel\n} from \"axios\";\nimport { setup } from \"axios-cache-adapter\";\nimport API_CONFIG from \"../config/api.json\";\n\n// Create `axios` instance with pre-configured `axios-cache-adapter`\nconst api = setup({\n  baseURL: \"https://fortniteapi.io\",\n  cache: {\n    maxAge: 60 * 1000\n  },\n  headers: {\n    ...API_CONFIG,\n    \"Content-Type\": \"application/json\"\n  }\n});\n\n// Response callback\nconst handleResponse = (response: AxiosResponse) => response.data;\n// Error callback\nconst handleError = (requestError: AxiosError) =>\n  Promise.reject(requestError.response);\n\nconst handleRequest = (config: AxiosRequestConfig) => {\n  const source = axios.CancelToken.source();\n  let loading = true;\n  return {\n    cancel: () => (loading ? source.cancel() : undefined),\n    isLoading: () => loading,\n    request: new Promise<AxiosResponse>((resolve, reject) => {\n      const requestConfig = { ...config, cancelToken: source.token };\n      const requestName = `[${config.method || \"GET\"}] ${config.url}`;\n      api.request(requestConfig).then(\n        (response: AxiosResponse) => {\n          loading = false;\n          console.log(requestName, { config, response });\n          resolve(response);\n        },\n        (error: AxiosError | Cancel) => {\n          loading = false;\n          if (axios.isCancel(error)) {\n            console.warn(requestName, \"(canceled)\", { config, error });\n          } else {\n            console.error(requestName, { config, error });\n          }\n          reject(error);\n        }\n      );\n    }).then(handleResponse, handleError)\n  };\n};\n\nexport default (config: AxiosRequestConfig | AxiosRequestConfig[]) => {\n  if (Array.isArray(config)) {\n    const requests = config.map(c => handleRequest(c));\n    return {\n      cancel: () => requests.map(({ cancel }) => cancel()),\n      isLoading: () => requests.some(({ isLoading }) => isLoading()),\n      request: Promise.all<AxiosResponse>(\n        requests.map(({ request }) => request)\n      )\n    };\n  }\n  return handleRequest(config);\n};\n","import { createContext, useContext } from \"react\";\n\nexport const accountsDefault = [] as AccountsContext;\n\nexport const AccountsContext = createContext<AccountsContext>(accountsDefault);\n\nexport default () => useContext(AccountsContext);\n","import React, { FC, useEffect, useState } from \"react\";\n\nimport { lookup } from \"../../utils/fortnite\";\nimport { AccountsContext, accountsDefault } from \"./index\";\n\nconst AccountsProvider: FC<{ usernames: string[] }> = ({\n  children,\n  usernames\n}) => {\n  const [accounts, setAccounts] = useState<AccountsContext>(accountsDefault);\n  useEffect(() => {\n    const { cancel, request } = lookup(usernames);\n    request.then(\n      users =>\n        setAccounts(\n          users.map((user: { account_id: string }, userIndex: number) => ({\n            username: usernames[userIndex],\n            ...user\n          }))\n        ),\n      console.error\n    );\n    return cancel;\n  }, [usernames]);\n  return (\n    <AccountsContext.Provider value={accounts}>\n      {children}\n    </AccountsContext.Provider>\n  );\n};\n\nexport default AccountsProvider;\n","import request from \"./request\";\n\nexport const challenges = (season: string = \"current\") =>\n  request({\n    params: { season },\n    url: \"/challenges\"\n  });\n\nexport const lookup = (usernames: string[], platform: string = \"psn\") =>\n  request(\n    usernames.map(username => ({\n      params: { platform, username },\n      url: \"/lookup\"\n    }))\n  );\n\nexport const stats = (accountIds: string[]) =>\n  request(accountIds.map(account => ({ params: { account }, url: \"/stats\" })));\n\n// const getRandomInt = (min: number, max: number) =>\n//   Math.round(min + Math.random() * (max - min));\n//\n// const getRandomStats = () => {\n//   const placetop1 = getRandomInt(0, 32);\n//   const placetop3 = getRandomInt(placetop1, placetop1 * 3);\n//   const placetop5 = getRandomInt(placetop3, (placetop3 * 5) / 3);\n//   const placetop6 = getRandomInt(placetop5, (placetop5 * 6) / 5);\n//   const placetop10 = getRandomInt(placetop6, (placetop6 * 10) / 6);\n//   const placetop12 = getRandomInt(placetop10, (placetop10 * 12) / 10);\n//   const placetop25 = getRandomInt(placetop12, (placetop12 * 25) / 12);\n//   const minMatchesPlayed =\n//     placetop1 +\n//     placetop3 +\n//     placetop5 +\n//     placetop6 +\n//     placetop10 +\n//     placetop12 +\n//     placetop25;\n//   const matchesplayed = getRandomInt(minMatchesPlayed, minMatchesPlayed * 3);\n//   const kd = (1 - Math.random()) * 2;\n//   return {\n//     kd,\n//     kills: Math.floor(matchesplayed * kd),\n//     matchesplayed,\n//     minutesplayed: matchesplayed * getRandomInt(10, 15),\n//     placetop1,\n//     placetop10,\n//     placetop12,\n//     placetop25,\n//     placetop3,\n//     placetop5,\n//     placetop6,\n//     playersoutlived: getRandomInt(placetop25, placetop25 * 3),\n//     score: getRandomInt(8, 256),\n//     winrate: placetop1 / matchesplayed\n//   };\n// };\n//\n// export const stats = (account: string) => {\n//   const r = request({ params: { account }, url: \"/stats\" });\n//   return {\n//     cancel: r.cancel,\n//     request: r.request.then(() => ({\n//       account: {\n//         level: getRandomInt(8, 256),\n//         progress_pct: Math.random() * 100\n//       },\n//       global_stats: {\n//         duo: getRandomStats(),\n//         solo: getRandomStats(),\n//         squad: getRandomStats()\n//       }\n//     }))\n//   };\n// };\n","import React, { FC, useEffect, useState } from \"react\";\n\nimport { stats } from \"../../utils/fortnite\";\nimport useAccounts from \"../accounts\";\nimport AccountsProvider from \"../accounts/Provider\";\nimport { PlayersContext, playersDefault } from \"./index\";\n\nexport const PlayersProvider: FC = ({ children }) => {\n  const [players, setPlayers] = useState<PlayersContext>(playersDefault);\n  const accounts = useAccounts();\n  useEffect(() => {\n    const { cancel, request } = stats(\n      accounts.map(({ account_id }) => account_id)\n    );\n    request.then(p => setPlayers(p), console.error);\n    return cancel;\n  }, [accounts]);\n  return (\n    <PlayersContext.Provider value={players}>\n      {children}\n    </PlayersContext.Provider>\n  );\n};\n\nconst PlayersAccountsProvider: FC<{ usernames: string[] }> = ({\n  usernames,\n  ...props\n}) => (\n  <AccountsProvider usernames={usernames}>\n    <PlayersProvider {...props} />\n  </AccountsProvider>\n);\n\nexport default PlayersAccountsProvider;\n","import React, { FC } from \"react\";\nimport { Container } from \"react-bootstrap\";\n\nimport \"./App.scss\";\nimport PlayersList from \"./components/Player/List\";\nimport CONFIG from \"./config/index.json\";\nimport useNavigation from \"./context/navigation\";\nimport NavigationProvider from \"./context/navigation/Provider\";\nimport PlayersProvider from \"./context/players/Provider\";\n\nconst AppContent: FC = () => {\n  const { tab } = useNavigation();\n  switch (tab) {\n    case \"challenges\":\n      return <>Under construction.</>;\n    default:\n      return (\n        <PlayersProvider usernames={CONFIG.usernames}>\n          <PlayersList />\n        </PlayersProvider>\n      );\n  }\n};\n\nconst App = () => (\n  <Container className=\"App\">\n    <header className=\"App-header\">\n      <h1>Fortnite Losers</h1>\n    </header>\n    <main className=\"App-main\">\n      <NavigationProvider>\n        <AppContent />\n      </NavigationProvider>\n    </main>\n  </Container>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}