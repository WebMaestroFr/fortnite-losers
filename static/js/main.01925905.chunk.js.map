{"version":3,"sources":["utils/request.ts","context/navigation/index.ts","utils/format.ts","components/Player/Stats.tsx","utils/fortnite.ts","components/Player/List.tsx","context/navigation/Provider.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["api","setup","baseURL","cache","maxAge","headers","API_CONFIG","handleResponse","response","data","handleError","requestError","Promise","reject","config","source","axios","CancelToken","loading","cancel","isLoading","request","resolve","requestConfig","cancelToken","token","requestName","method","url","then","console","info","error","isCancel","warn","navigationDefault","category","tab","NavigationContext","createContext","useContext","formatStatColor","name","formatStatTitle","PlayerStats","accountId","useState","playerAccount","setPlayerAccount","playerStatsCategories","setPlayerStatsCategories","useNavigation","useEffect","params","account","global_stats","selectedStats","selectedStatsEntries","Object","entries","topStats","map","fill","value","restValue","reduce","rest","matchesplayed","chartData","className","aspect","width","height","dataKey","isAnimationActive","level","ProgressBar","now","progress_pct","index","key","PlayerListItem","username","setAccountId","platform","lookup","user","account_id","Col","md","lg","Card","Body","Title","as","Text","PlayerList","usernames","Row","NavigationProvider","children","navigation","setNavigation","handleSelect","eventKey","prevNavigation","Provider","Navbar","Nav","variant","activeKey","onSelect","Item","Link","USERNAMES","AppContent","App","Container","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"ybAUMA,EAAMC,gBAAM,CAChBC,QAAS,yBACTC,MAAO,CACLC,OAAQ,MAEVC,QAAQ,eACHC,EADE,CAEL,eAAgB,uBAKdC,EAAiB,SAACC,GAAD,OAA6BA,EAASC,MAEvDC,EAAc,SAACC,GAAD,OAClBC,QAAQC,OAAOF,EAAaH,WAEf,WAACM,GACd,IAAMC,EAASC,IAAMC,YAAYF,SAC7BG,GAAU,EACd,MAAO,CACLC,OAAQ,WACFD,GACFH,EAAOI,UAGXC,UAAW,kBAAMF,GACjBG,QAAS,IAAIT,SAAuB,SAACU,EAAST,GAC5C,IAAMU,EAAa,eAAQT,EAAR,CAAgBU,YAAaT,EAAOU,QACjDC,EAAW,WAAOZ,EAAOa,QAAU,MAAxB,aAAkCb,EAAOc,KAC1D5B,EAAIqB,QAAQE,GAAeM,MACzB,SAACrB,GACCU,GAAU,EACVY,QAAQC,KAAKL,EAAa,CAAEZ,SAAQN,aACpCc,EAAQd,MAEV,SAACwB,GACCd,GAAU,EACNF,IAAMiB,SAASD,GACjBF,QAAQI,KAAKR,EAAa,aAAc,CAAEZ,SAAQkB,UAElDF,QAAQE,MAAMN,EAAa,CAAEZ,SAAQkB,UAEvCnB,EAAOmB,SAGVH,KAAKtB,EAAgBG,K,0BCtDfyB,EAAoB,CAC/BC,SAAU,OACVC,IAAK,SAGMC,EAAoBC,wBAC/BJ,GAGa,oBAAMK,qBAAWF,ICXnBG,EAAkB,SAACC,GAC9B,OAAQA,GACN,IAAK,YACH,MAAO,UACT,IAAK,YACL,IAAK,YACH,MAAO,UACT,IAAK,YACL,IAAK,aACH,MAAO,UACT,IAAK,aACL,IAAK,aACH,MAAO,UACT,QACE,MAAO,SAIAC,EAAkB,SAACD,GAC9B,OAAQA,GACN,IAAK,YACH,MAAO,QACT,IAAK,KACH,MAAO,kBACT,IAAK,UACH,MAAO,WACT,IAAK,YACH,MAAO,QACT,IAAK,YACH,MAAO,QACT,IAAK,YACH,MAAO,QACT,IAAK,aACH,MAAO,SACT,IAAK,aACH,MAAO,SACT,IAAK,aACH,MAAO,SACT,IAAK,QACH,MAAO,QACT,IAAK,gBACH,MAAO,iBACT,IAAK,gBACH,MAAO,iBACT,IAAK,QACH,MAAO,QACT,IAAK,kBACH,MAAO,mBACT,QACE,OAAOA,ICuDEE,EA9FV,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UAAgB,EACoBC,qBADpB,mBACfC,EADe,KACAC,EADA,OAEoCF,qBAFpC,mBAEfG,EAFe,KAEQC,EAFR,KAMdd,EAAae,IAAbf,SAERgB,qBAAU,WAAO,IAAD,ECHhB/B,EAAQ,CAAEgC,OAAQ,CAAEC,QDIgBT,GCJLjB,IAAK,WDI1BT,EADM,EACNA,OAKR,OANc,EACEE,QACRQ,MAAK,YAAgC,IAA7ByB,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,aACvBP,EAAiBM,GACjBJ,EAAyBK,KACxBzB,QAAQE,OACJb,IACN,CAAC0B,IAEJ,IAAMW,EACJP,GAA0BA,EAAsBb,GAE5CqB,EAAuBD,GAAiBE,OAAOC,QAAQH,GAEvDI,EACJJ,GACA,CACE,YACA,YACA,YACA,YACA,aACA,aACA,cACAK,KAAI,SAAAnB,GAAI,MAAK,CACboB,KAAMrB,EAAgBC,GACtBA,KAAMC,EAAgBD,GACtBqB,MACEP,EACEd,OAUFsB,EACJR,GACAI,GACAA,EAASK,QACP,SAACC,EAAD,UAAqBA,EAArB,EAASH,QACTP,EAAcW,eAEZC,EAAYR,GAAQ,CACxB,CACEE,KAAMrB,EAAgB,iBACtBC,KAAMC,EAAgB,iBACtBoB,MAAOC,IAJe,mBAMrBJ,IAGL,OACE,yBAAKS,UAAU,eACb,kBAAC,IAAD,CAAqBC,OAAQ,GAC3B,kBAAC,IAAD,CAAUC,MAAO,IAAKC,OAAQ,KAC5B,kBAAC,IAAD,CAAKC,QAAQ,QAAQhE,KAAM2D,EAAWM,mBAAmB,MAG5D3B,EACC,4BAAQsB,UAAU,sBAChB,wBAAIA,UAAU,qBAAd,SACQ,8BAAOtB,EAAc4B,QAE7B,kBAACC,EAAA,EAAD,CAAaC,IAAK9B,EAAc+B,gBAEhC,KACHrB,EACC,yBAAKY,UAAU,uBACZZ,EAAqBI,KAAI,WAAgBkB,GAAhB,uBAAErC,EAAF,KAAQqB,EAAR,YACxB,yBAAKM,UAAU,mBAAmBW,IAAKD,GACrC,0BAAMV,UAAU,yBACb1B,EAAgBD,IAEnB,0BAAM2B,UAAU,0BAA0BN,QAI9C,OE7FJkB,EAED,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACapC,qBADb,mBACdD,EADc,KACHsC,EADG,KAUrB,OARA/B,qBAAU,WAAO,IAAD,EDFI,SAAC8B,GAAD,OACpB7D,EAAQ,CACNgC,OAAQ,CAAE+B,SAAU,MAAOF,YAC3BtD,IAAK,YCAuByD,CAAOH,GAA3B/D,EADM,EACNA,OAKR,OANc,EACEE,QACRQ,MAAK,SAAAyD,GACXxD,QAAQI,KAAKoD,GACbH,EAAaG,EAAKC,cACjBzD,QAAQE,OACJb,IACN,CAAC+D,IAEF,kBAACM,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,GACd,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,KAAN,KACE,kBAACD,EAAA,EAAKE,MAAN,CAAYC,GAAG,MAAMZ,GACpBrC,EACC,kBAAC8C,EAAA,EAAKI,KAAN,CAAW1B,UAAU,0BACnB,kBAAC,EAAD,CAAaxB,UAAWA,KAExB,SAeCmD,EARiC,SAAC,GAAD,IAAGC,EAAH,EAAGA,UAAH,OAC9C,kBAACC,EAAA,EAAD,CAAK7B,UAAU,cACZ4B,EAAUpC,KAAI,SAAAqB,GAAQ,OACrB,kBAAC,EAAD,CAAgBF,IAAKE,EAAUA,SAAUA,S,0BCahCiB,EA7CuB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EAClBtD,mBAClCX,GAFoD,mBAC/CkE,EAD+C,KACnCC,EADmC,KAIhDC,EAAe,SAACvB,GAAD,OAA6B,SAACwB,GAAD,OAChDF,GAAc,SAAAG,GAAc,sBACvBA,EADuB,eAEzBzB,EAAMwB,SAEX,OACE,kBAAClE,EAAkBoE,SAAnB,CAA4B3C,MAAOsC,GACjC,kBAACM,EAAA,EAAD,CAAQtC,UAAU,sCAChB,kBAACuC,EAAA,EAAD,CACEC,QAAQ,QACRC,UAAWT,EAAWhE,IACtB0E,SAAUR,EAAa,QAEvB,kBAACK,EAAA,EAAII,KAAL,KACE,kBAACJ,EAAA,EAAIK,KAAL,CAAUT,SAAS,SAAnB,UAEF,kBAACI,EAAA,EAAII,KAAL,KACE,kBAACJ,EAAA,EAAIK,KAAL,CAAUT,SAAS,cAAnB,gBAGJ,kBAACI,EAAA,EAAD,CACEC,QAAQ,QACRC,UAAWT,EAAWjE,SACtB2E,SAAUR,EAAa,aAEvB,kBAACK,EAAA,EAAII,KAAL,KACE,kBAACJ,EAAA,EAAIK,KAAL,CAAUT,SAAS,QAAnB,SAEF,kBAACI,EAAA,EAAII,KAAL,KACE,kBAACJ,EAAA,EAAIK,KAAL,CAAUT,SAAS,OAAnB,QAEF,kBAACI,EAAA,EAAII,KAAL,KACE,kBAACJ,EAAA,EAAIK,KAAL,CAAUT,SAAS,SAAnB,YAILJ,ICrCDc,EAAY,CAChB,eACA,UACA,aACA,cACA,SACA,YACA,cACA,eAGIC,EAAiB,WAErB,OADgBhE,IAARd,KAEN,IAAK,aACH,OAAO,2DACT,QACE,OAAO,kBAAC,EAAD,CAAY4D,UAAWiB,MAiBrBE,EAbH,kBACV,kBAACC,EAAA,EAAD,CAAWhD,UAAU,OACnB,4BAAQA,UAAU,cAChB,gDAEF,0BAAMA,UAAU,YACd,kBAAC,EAAD,KACE,kBAAC,EAAD,U,OCxBYiD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDkI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpG,MAAK,SAAAqG,GACJA,EAAaC,gBAEdC,OAAM,SAAApG,GACLF,QAAQE,MAAMA,EAAMqG,c","file":"static/js/main.01925905.chunk.js","sourcesContent":["import axios, {\n  AxiosError,\n  AxiosRequestConfig,\n  AxiosResponse,\n  Cancel\n} from \"axios\";\nimport { setup } from \"axios-cache-adapter\";\nimport API_CONFIG from \"../config/api.json\";\n\n// Create `axios` instance with pre-configured `axios-cache-adapter` attached to it\nconst api = setup({\n  baseURL: \"https://fortniteapi.io\",\n  cache: {\n    maxAge: 12 * 1000\n  },\n  headers: {\n    ...API_CONFIG,\n    \"Content-Type\": \"application/json\"\n  }\n});\n\n// Response callback\nconst handleResponse = (response: AxiosResponse) => response.data;\n// Error callback\nconst handleError = (requestError: AxiosError) =>\n  Promise.reject(requestError.response);\n\nexport default (config: AxiosRequestConfig) => {\n  const source = axios.CancelToken.source();\n  let loading = true;\n  return {\n    cancel: () => {\n      if (loading) {\n        source.cancel();\n      }\n    },\n    isLoading: () => loading,\n    request: new Promise<AxiosResponse>((resolve, reject) => {\n      const requestConfig = { ...config, cancelToken: source.token };\n      const requestName = `[${config.method || \"GET\"}] ${config.url}`;\n      api.request(requestConfig).then(\n        (response: AxiosResponse) => {\n          loading = false;\n          console.info(requestName, { config, response });\n          resolve(response);\n        },\n        (error: AxiosError | Cancel) => {\n          loading = false;\n          if (axios.isCancel(error)) {\n            console.warn(requestName, \"(canceled)\", { config, error });\n          } else {\n            console.error(requestName, { config, error });\n          }\n          reject(error);\n        }\n      );\n    }).then(handleResponse, handleError)\n  };\n};\n","import { createContext, useContext } from \"react\";\n\nexport const navigationDefault = {\n  category: \"solo\",\n  tab: \"stats\"\n} as NavigationContext;\n\nexport const NavigationContext = createContext<NavigationContext>(\n  navigationDefault\n);\n\nexport default () => useContext(NavigationContext);\n","export const formatStatColor = (name: string) => {\n  switch (name) {\n    case \"placetop1\":\n      return \"#ffc107\";\n    case \"placetop3\":\n    case \"placetop5\":\n      return \"#6f42c1\";\n    case \"placetop6\":\n    case \"placetop10\":\n      return \"#007bff\";\n    case \"placetop12\":\n    case \"placetop25\":\n      return \"#28a745\";\n    default:\n      return \"#ccc\";\n  }\n};\n\nexport const formatStatTitle = (name: string) => {\n  switch (name) {\n    case \"placetop1\":\n      return \"Top 1\";\n    case \"kd\":\n      return \"Kills per Death\";\n    case \"winrate\":\n      return \"Win Rate\";\n    case \"placetop3\":\n      return \"Top 3\";\n    case \"placetop5\":\n      return \"Top 5\";\n    case \"placetop6\":\n      return \"Top 6\";\n    case \"placetop10\":\n      return \"Top 10\";\n    case \"placetop12\":\n      return \"Top 12\";\n    case \"placetop25\":\n      return \"Top 25\";\n    case \"kills\":\n      return \"Kills\";\n    case \"matchesplayed\":\n      return \"Matches Played\";\n    case \"minutesplayed\":\n      return \"Minutes Played\";\n    case \"score\":\n      return \"Score\";\n    case \"playersoutlived\":\n      return \"Players Outlived\";\n    default:\n      return name;\n  }\n};\n","import React, { FC, useEffect, useState } from \"react\";\nimport { ProgressBar } from \"react-bootstrap\";\nimport { Pie, PieChart, ResponsiveContainer } from \"recharts\";\n\nimport useNavigation from \"../../context/navigation\";\nimport { formatStatColor, formatStatTitle } from \"../../utils/format\";\nimport { stats } from \"../../utils/fortnite\";\n\nconst PlayerStats: FC<{\n  accountId: string;\n}> = ({ accountId }) => {\n  const [playerAccount, setPlayerAccount] = useState<PlayerAccount>();\n  const [playerStatsCategories, setPlayerStatsCategories] = useState<\n    PlayerStatsCategories\n  >();\n\n  const { category } = useNavigation();\n\n  useEffect(() => {\n    const { cancel, request } = stats(accountId);\n    request.then(({ account, global_stats }) => {\n      setPlayerAccount(account);\n      setPlayerStatsCategories(global_stats);\n    }, console.error);\n    return cancel;\n  }, [accountId]);\n\n  const selectedStats =\n    playerStatsCategories && (playerStatsCategories[category] as PlayerStats);\n\n  const selectedStatsEntries = selectedStats && Object.entries(selectedStats);\n\n  const topStats =\n    selectedStats &&\n    [\n      \"placetop1\",\n      \"placetop3\",\n      \"placetop5\",\n      \"placetop6\",\n      \"placetop10\",\n      \"placetop12\",\n      \"placetop25\"\n    ].map(name => ({\n      fill: formatStatColor(name),\n      name: formatStatTitle(name),\n      value:\n        selectedStats[\n          name as\n            | \"placetop1\"\n            | \"placetop3\"\n            | \"placetop5\"\n            | \"placetop6\"\n            | \"placetop10\"\n            | \"placetop12\"\n            | \"placetop25\"\n        ]\n    }));\n  const restValue =\n    selectedStats &&\n    topStats &&\n    topStats.reduce(\n      (rest, { value }) => rest - value,\n      selectedStats.matchesplayed\n    );\n  const chartData = topStats && [\n    {\n      fill: formatStatColor(\"matchesplayed\"),\n      name: formatStatTitle(\"matchesplayed\"),\n      value: restValue\n    },\n    ...topStats\n  ];\n\n  return (\n    <div className=\"PlayerStats\">\n      <ResponsiveContainer aspect={1}>\n        <PieChart width={730} height={250}>\n          <Pie dataKey=\"value\" data={chartData} isAnimationActive={true} />\n        </PieChart>\n      </ResponsiveContainer>\n      {playerAccount ? (\n        <header className=\"PlayerStats-header\">\n          <h3 className=\"PlayerStats-level\">\n            Level <span>{playerAccount.level}</span>\n          </h3>\n          <ProgressBar now={playerAccount.progress_pct} />\n        </header>\n      ) : null}\n      {selectedStatsEntries ? (\n        <div className=\"PlayerStats-content\">\n          {selectedStatsEntries.map(([name, value], index) => (\n            <div className=\"PlayerStats-stat\" key={index}>\n              <span className=\"PlayerStats-stat-name\">\n                {formatStatTitle(name)}\n              </span>\n              <span className=\"PlayerStats-stat-value\">{value}</span>\n            </div>\n          ))}\n        </div>\n      ) : null}\n    </div>\n  );\n};\n\nexport default PlayerStats;\n","import request from \"./request\";\n\nexport const challenges = (season: string = \"current\") =>\n  request({\n    params: { season },\n    url: \"/challenges\"\n  });\n\nexport const lookup = (username: string) =>\n  request({\n    params: { platform: \"psn\", username },\n    url: \"/lookup\"\n  });\n\nexport const stats = (account: string) =>\n  request({ params: { account }, url: \"/stats\" });\n","import React, { FC, useEffect, useState } from \"react\";\nimport { Card, Col, Row } from \"react-bootstrap\";\n\nimport { lookup } from \"../../utils/fortnite\";\nimport PlayerStats from \"./Stats\";\n\nconst PlayerListItem: FC<{\n  username: string;\n}> = ({ username }) => {\n  const [accountId, setAccountId] = useState<string>();\n  useEffect(() => {\n    const { cancel, request } = lookup(username);\n    request.then(user => {\n      console.warn(user);\n      setAccountId(user.account_id);\n    }, console.error);\n    return cancel;\n  }, [username]);\n  return (\n    <Col md={6} lg={4}>\n      <Card>\n        <Card.Body>\n          <Card.Title as=\"h2\">{username}</Card.Title>\n          {accountId ? (\n            <Card.Text className=\"PlayerListItem-content\">\n              <PlayerStats accountId={accountId} />\n            </Card.Text>\n          ) : null}\n        </Card.Body>\n      </Card>\n    </Col>\n  );\n};\n\nconst PlayerList: FC<{ usernames: string[] }> = ({ usernames }) => (\n  <Row className=\"PlayerList\">\n    {usernames.map(username => (\n      <PlayerListItem key={username} username={username} />\n    ))}\n  </Row>\n);\n\nexport default PlayerList;\n","import React, { FC, useState } from \"react\";\nimport { Nav, Navbar } from \"react-bootstrap\";\n\nimport { NavigationContext, navigationDefault } from \"./index\";\n\nexport const NavigationProvider: FC = ({ children }) => {\n  const [navigation, setNavigation] = useState<NavigationContext>(\n    navigationDefault\n  );\n  const handleSelect = (key: \"category\" | \"tab\") => (eventKey: string) =>\n    setNavigation(prevNavigation => ({\n      ...prevNavigation,\n      [key]: eventKey as NavigationContext[\"category\"]\n    }));\n  return (\n    <NavigationContext.Provider value={navigation}>\n      <Navbar className=\"Navigation justify-content-between\">\n        <Nav\n          variant=\"pills\"\n          activeKey={navigation.tab}\n          onSelect={handleSelect(\"tab\")}\n        >\n          <Nav.Item>\n            <Nav.Link eventKey=\"stats\">Stats</Nav.Link>\n          </Nav.Item>\n          <Nav.Item>\n            <Nav.Link eventKey=\"challenges\">Challenges</Nav.Link>\n          </Nav.Item>\n        </Nav>\n        <Nav\n          variant=\"pills\"\n          activeKey={navigation.category}\n          onSelect={handleSelect(\"category\")}\n        >\n          <Nav.Item>\n            <Nav.Link eventKey=\"solo\">Solo</Nav.Link>\n          </Nav.Item>\n          <Nav.Item>\n            <Nav.Link eventKey=\"duo\">Duo</Nav.Link>\n          </Nav.Item>\n          <Nav.Item>\n            <Nav.Link eventKey=\"squad\">Squad</Nav.Link>\n          </Nav.Item>\n        </Nav>\n      </Navbar>\n      {children}\n    </NavigationContext.Provider>\n  );\n};\n\nexport default NavigationProvider;\n","import React, { FC } from \"react\";\nimport { Container } from \"react-bootstrap\";\n\nimport \"./App.scss\";\nimport PlayerList from \"./components/Player/List\";\nimport useNavigation from \"./context/navigation\";\nimport NavigationProvider from \"./context/navigation/Provider\";\n\nconst USERNAMES = [\n  \"webmaestrofr\",\n  \"lojah01\",\n  \"Maxime_SMN\",\n  \"laplume_bob\",\n  \"Tibsim\",\n  \"Fabinoide\",\n  \"le_grin_che\",\n  \"RaskarKapak\"\n];\n\nconst AppContent: FC = () => {\n  const { tab } = useNavigation();\n  switch (tab) {\n    case \"challenges\":\n      return <>Under construction.</>;\n    default:\n      return <PlayerList usernames={USERNAMES} />;\n  }\n};\n\nconst App = () => (\n  <Container className=\"App\">\n    <header className=\"App-header\">\n      <h1>Fortnite Losers</h1>\n    </header>\n    <main className=\"App-main\">\n      <NavigationProvider>\n        <AppContent />\n      </NavigationProvider>\n    </main>\n  </Container>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}